{"version":3,"file":"VueFinalModal.esm.js","sources":["../lib/utils/focusTrap.js","../lib/utils/dragResize.js","../lib/utils/bodyScrollLock.js","../lib/VueFinalModal.vue","../lib/PluginCore.js","../lib/utils/errors.js","../lib/Plugin.js"],"sourcesContent":["// stolen from vue-js-modal\n\nconst FOCUSABLE_ELEMENTS_QUERY =\n  'button:not([disabled]), ' +\n  'select:not([disabled]), ' +\n  'a[href]:not([disabled]), ' +\n  'area[href]:not([disabled]), ' +\n  '[contentEditable=\"\"]:not([disabled]), ' +\n  '[contentEditable=\"true\"]:not([disabled]), ' +\n  '[contentEditable=\"TRUE\"]:not([disabled]), ' +\n  'textarea:not([disabled]), ' +\n  'iframe:not([disabled]), ' +\n  'input:not([disabled]), ' +\n  'summary:not([disabled]), ' +\n  '[tabindex]:not([tabindex=\"-1\"])'\n\nconst isTabPressed = event => {\n  return event.key === 'Tab' || event.keyCode === 9\n}\n\nconst querySelectorAll = (element, selector) => {\n  return [...(element.querySelectorAll(selector) || [])]\n}\n\nconst queryFocusableElements = element => {\n  return querySelectorAll(element, FOCUSABLE_ELEMENTS_QUERY)\n}\n\nconst isFocused = element => {\n  return element == document.activeElement\n}\n\nconst isNothingFocused = () => {\n  return !document.activeElement\n}\n\nclass FocusTrap {\n  constructor() {\n    this.root = null\n    this.elements = []\n\n    this.onKeyDown = this.onKeyDown.bind(this)\n    this.enable = this.enable.bind(this)\n    this.disable = this.disable.bind(this)\n    this.firstElement = this.firstElement.bind(this)\n    this.lastElement = this.lastElement.bind(this)\n  }\n\n  lastElement() {\n    return this.elements[this.elements.length - 1] || null\n  }\n\n  firstElement() {\n    return this.elements[0] || null\n  }\n\n  onKeyDown(event) {\n    if (!isTabPressed(event)) {\n      return\n    }\n\n    // SHIFT + TAB\n    if (event.shiftKey) {\n      if (isFocused(this.firstElement())) {\n        this.lastElement().focus()\n        event.preventDefault()\n      }\n      return\n    }\n\n    // TAB\n    if (isNothingFocused() || isFocused(this.lastElement())) {\n      this.firstElement().focus()\n      event.preventDefault()\n      return\n    }\n  }\n\n  enabled() {\n    return !!this.root\n  }\n\n  enable(root) {\n    if (!root) {\n      return\n    }\n\n    this.root = root\n    this.elements = queryFocusableElements(this.root)\n\n    this.root.addEventListener('keydown', this.onKeyDown)\n  }\n\n  disable() {\n    this.root.removeEventListener('keydown', this.onKeyDown)\n    this.root = null\n  }\n}\n\nexport default FocusTrap\n","export const setStyle = (el, key, value) => {\n  const cacheStyle = el.style[key]\n  el.style[key] = value\n  return () => {\n    el.style[key] = cacheStyle\n  }\n}\n\nexport const getPosition = e => {\n  const { clientX: x, clientY: y } = e.targetTouches ? e.targetTouches[0] : e\n  return { x, y }\n}\n\nexport const clamp = (min, num, max) => {\n  return Math.min(Math.max(num, min), max)\n}\n\nexport const trimPx = distance => {\n  return Number(distance.replace(/px$/, '')) || 0\n}\n\nexport const validDragElement = (e, el, dragSelector) => {\n  if (typeof dragSelector !== 'string') return true\n  const list = Array.apply(null, el.querySelectorAll(dragSelector))\n  return list.includes(e.target)\n}\n\nexport const getLimit = (vfmContainer, vfmWrapper, vfmContent) => {\n  const rectContainer = vfmContainer.getBoundingClientRect()\n  const rectContent = vfmContent.getBoundingClientRect()\n  return {\n    rectContainer,\n    rectContent,\n    minTop: trimPx(vfmWrapper.style.top) + rectContainer.top - rectContent.top,\n    minLeft: trimPx(vfmWrapper.style.left) + rectContainer.left - rectContent.left,\n    maxTop: trimPx(vfmWrapper.style.top) + rectContainer.bottom - rectContent.bottom,\n    maxLeft: trimPx(vfmWrapper.style.left) + rectContainer.right - rectContent.right\n  }\n}\n\nexport const getWrapperStyle = (wrapperPosition, offset, fitParent, limit, vfmContentAbsolute) => {\n  let top = wrapperPosition.top + offset.y\n  let left = wrapperPosition.left + offset.x\n  if (fitParent) {\n    top = clamp(limit.minTop, top, limit.maxTop)\n    left = clamp(limit.minLeft, left, limit.maxLeft)\n  }\n  return {\n    top: top + 'px',\n    left: left + 'px',\n    position: 'relative',\n    touchAction: 'none',\n    ...(vfmContentAbsolute && {\n      height: '-webkit-fill-available',\n      width: '-webkit-fill-available'\n    })\n  }\n}\n\nconst pointerType = {\n  down: {\n    pc: 'mousedown',\n    m: 'touchstart'\n  },\n  move: {\n    pc: 'mousemove',\n    m: 'touchmove'\n  },\n  up: {\n    pc: 'mouseup',\n    m: 'touchend'\n  }\n}\nexport const addEventListener = (type, el, callback) => {\n  el.addEventListener(pointerType[type].pc, callback)\n  el.addEventListener(pointerType[type].m, callback, { passive: false })\n}\nexport const removeEventListener = (type, el, callback) => {\n  el.removeEventListener(pointerType[type].pc, callback)\n  el.removeEventListener(pointerType[type].m, callback)\n}\n\nexport const addPointerMoving = (moving, ending = () => {}) => {\n  const end = e => {\n    ending(e)\n    removeEventListener('move', document, moving)\n    removeEventListener('up', document, end)\n  }\n  addEventListener('move', document, moving)\n  addEventListener('up', document, end)\n}\n","// stolen from body-scroll-lock\n\n// Older browsers don't support event options, feature detect it.\nlet hasPassiveEvents = false\nif (typeof window !== 'undefined') {\n  const passiveTestOptions = {\n    get passive() {\n      hasPassiveEvents = true\n      return undefined\n    }\n  }\n  window.addEventListener('testPassive', null, passiveTestOptions)\n  window.removeEventListener('testPassive', null, passiveTestOptions)\n}\n\nconst isIosDevice =\n  typeof window !== 'undefined' &&\n  window.navigator &&\n  window.navigator.platform &&\n  (/iP(ad|hone|od)/.test(window.navigator.platform) ||\n    (window.navigator.platform === 'MacIntel' && window.navigator.maxTouchPoints > 1))\n\nlet locks = []\nlet documentListenerAdded = false\nlet clientY = 0\nlet initialClientY = -1\nlet previousBodyOverflowSetting\nlet previousBodyPaddingRight\n\nconst hasScrollbar = el => {\n  if (!el || el.nodeType !== Node.ELEMENT_NODE) return false\n\n  const style = window.getComputedStyle(el)\n  return ['auto', 'scroll'].includes(style.overflowY) && el.scrollHeight > el.clientHeight\n}\n\nconst shouldScroll = (el, delta) => {\n  if (el.scrollTop === 0 && delta < 0) return false\n  if (el.scrollTop + el.clientHeight + delta >= el.scrollHeight && delta > 0) return false\n  return true\n}\n\nconst composedPath = el => {\n  const path = []\n  while (el) {\n    path.push(el)\n    if (el.classList.contains('vfm')) return path\n    el = el.parentElement\n  }\n  return path\n}\n\nconst hasAnyScrollableEl = (el, delta) => {\n  let hasAnyScrollableEl = false\n  const path = composedPath(el)\n  path.forEach(el => {\n    if (hasScrollbar(el) && shouldScroll(el, delta)) {\n      hasAnyScrollableEl = true\n    }\n  })\n  return hasAnyScrollableEl\n}\n\n// returns true if `el` should be allowed to receive touchmove events.\nconst allowTouchMove = el => locks.some(() => hasAnyScrollableEl(el, -clientY))\n\nconst preventDefault = rawEvent => {\n  const e = rawEvent || window.event\n\n  // For the case whereby consumers adds a touchmove event listener to document.\n  // Recall that we do document.addEventListener('touchmove', preventDefault, { passive: false })\n  // in disableBodyScroll - so if we provide this opportunity to allowTouchMove, then\n  // the touchmove event on document will break.\n  if (allowTouchMove(e.target)) {\n    return true\n  }\n  // Do not prevent if the event has more than one touch (usually meaning this is a multi touch gesture like pinch to zoom).\n  if (e.touches.length > 1) return true\n\n  if (e.preventDefault) e.preventDefault()\n\n  return false\n}\n\nconst setOverflowHidden = options => {\n  // If previousBodyPaddingRight is already set, don't set it again.\n  if (previousBodyPaddingRight === undefined) {\n    const reserveScrollBarGap = !!options && options.reserveScrollBarGap === true\n    const scrollBarGap = window.innerWidth - document.documentElement.clientWidth\n\n    if (reserveScrollBarGap && scrollBarGap > 0) {\n      const computedBodyPaddingRight = parseInt(getComputedStyle(document.body).getPropertyValue('padding-right'), 10)\n      previousBodyPaddingRight = document.body.style.paddingRight\n      document.body.style.paddingRight = `${computedBodyPaddingRight + scrollBarGap}px`\n    }\n  }\n  // If previousBodyOverflowSetting is already set, don't set it again.\n  if (previousBodyOverflowSetting === undefined) {\n    previousBodyOverflowSetting = document.body.style.overflow\n    document.body.style.overflow = 'hidden'\n  }\n}\n\nconst restoreOverflowSetting = () => {\n  if (previousBodyPaddingRight !== undefined) {\n    document.body.style.paddingRight = previousBodyPaddingRight\n\n    // Restore previousBodyPaddingRight to undefined so setOverflowHidden knows it\n    // can be set again.\n    previousBodyPaddingRight = undefined\n  }\n\n  if (previousBodyOverflowSetting !== undefined) {\n    document.body.style.overflow = previousBodyOverflowSetting\n\n    // Restore previousBodyOverflowSetting to undefined\n    // so setOverflowHidden knows it can be set again.\n    previousBodyOverflowSetting = undefined\n  }\n}\n// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollHeight#Problems_and_solutions\nconst isTargetElementTotallyScrolled = targetElement =>\n  targetElement ? targetElement.scrollHeight - targetElement.scrollTop <= targetElement.clientHeight : false\n\nconst handleScroll = (event, targetElement) => {\n  clientY = event.targetTouches[0].clientY - initialClientY\n\n  if (allowTouchMove(event.target)) {\n    return false\n  }\n\n  if (targetElement && targetElement.scrollTop === 0 && clientY > 0) {\n    // element is at the top of its scroll.\n    return preventDefault(event)\n  }\n\n  if (isTargetElementTotallyScrolled(targetElement) && clientY < 0) {\n    // element is at the bottom of its scroll.\n    return preventDefault(event)\n  }\n\n  event.stopPropagation()\n  return true\n}\n\nexport const disableBodyScroll = (targetElement, options) => {\n  // targetElement must be provided\n  if (!targetElement) {\n    // eslint-disable-next-line no-console\n    console.error(\n      'disableBodyScroll unsuccessful - targetElement must be provided when calling disableBodyScroll on IOS devices.'\n    )\n    return\n  }\n\n  // disableBodyScroll must not have been called on this targetElement before\n  if (locks.some(lock => lock.targetElement === targetElement)) {\n    return\n  }\n\n  const lock = {\n    targetElement,\n    options: options || {}\n  }\n\n  locks = [...locks, lock]\n\n  if (isIosDevice) {\n    targetElement.ontouchstart = event => {\n      if (event.targetTouches.length === 1) {\n        // detect single touch.\n        initialClientY = event.targetTouches[0].clientY\n      }\n    }\n    targetElement.ontouchmove = event => {\n      if (event.targetTouches.length === 1) {\n        // detect single touch.\n        handleScroll(event, targetElement)\n      }\n    }\n\n    if (!documentListenerAdded) {\n      document.addEventListener('touchmove', preventDefault, hasPassiveEvents ? { passive: false } : undefined)\n      documentListenerAdded = true\n    }\n  } else {\n    setOverflowHidden(options)\n  }\n}\n\nexport const enableBodyScroll = targetElement => {\n  if (!targetElement) {\n    // eslint-disable-next-line no-console\n    console.error(\n      'enableBodyScroll unsuccessful - targetElement must be provided when calling enableBodyScroll on IOS devices.'\n    )\n    return\n  }\n\n  locks = locks.filter(lock => lock.targetElement !== targetElement)\n\n  if (isIosDevice) {\n    targetElement.ontouchstart = null\n    targetElement.ontouchmove = null\n\n    if (documentListenerAdded && locks.length === 0) {\n      document.removeEventListener('touchmove', preventDefault, hasPassiveEvents ? { passive: false } : undefined)\n      documentListenerAdded = false\n    }\n  } else if (!locks.length) {\n    restoreOverflowSetting()\n  }\n}\n","<template>\n  <div\n    v-if=\"ssr || visible\"\n    v-show=\"!ssr || visible\"\n    :style=\"bindStyle\"\n    class=\"vfm vfm--inset\"\n    :class=\"[attach === false ? 'vfm--fixed' : 'vfm--absolute', { 'vfm--prevent-none': preventClick }]\"\n    @keydown.esc=\"onEsc\"\n  >\n    <transition\n      ref=\"vfmOverlayTransition\"\n      v-bind=\"computedOverlayTransition\"\n      @before-enter=\"beforeOverlayEnter\"\n      @after-enter=\"afterOverlayEnter\"\n      @before-leave=\"beforeOverlayLeave\"\n      @after-leave=\"afterOverlayLeave\"\n    >\n      <div\n        v-show=\"!hideOverlay && visibility.overlay\"\n        class=\"vfm__overlay vfm--overlay vfm--absolute vfm--inset\"\n        :class=\"overlayClass\"\n        :style=\"overlayStyle\"\n      ></div>\n    </transition>\n    <transition\n      ref=\"vfmTransition\"\n      v-bind=\"computedTransition\"\n      @before-enter=\"beforeModalEnter\"\n      @after-enter=\"afterModalEnter\"\n      @before-leave=\"beforeModalLeave\"\n      @after-leave=\"afterModalLeave\"\n    >\n      <div\n        v-show=\"visibility.modal\"\n        ref=\"vfmContainer\"\n        class=\"vfm__container vfm--absolute vfm--inset vfm--outline-none\"\n        :class=\"classes\"\n        :style=\"styles\"\n        :aria-expanded=\"visibility.modal.toString()\"\n        role=\"dialog\"\n        aria-modal=\"true\"\n        tabindex=\"-1\"\n        @click.self=\"onClickContainer\"\n      >\n        <div ref=\"vfmWrapper\" class=\"vfm__wrapper\" :style=\"wrapperStyle\" @click.self=\"onClickContainer\">\n          <div\n            ref=\"vfmContent\"\n            class=\"vfm__content\"\n            :class=\"[contentClass, { 'vfm--prevent-auto': preventClick }]\"\n            :style=\"bindContentStyle\"\n          >\n            <slot v-bind:params=\"params\" />\n          </div>\n        </div>\n      </div>\n    </transition>\n    <div\n      v-if=\"visibility.resize && visibility.modal\"\n      ref=\"vfmResize\"\n      class=\"vfm__resize vfm--fixed vfm--prevent-none vfm--select-none\"\n      :style=\"resizeStyle\"\n    >\n      <div\n        v-for=\"direction in resizeDirections\"\n        :key=\"direction\"\n        :direction=\"direction\"\n        :class=\"`vfm--resize-${direction}`\"\n        class=\"vfm--absolute vfm--prevent-auto\"\n      ></div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport FocusTrap from './utils/focusTrap.js'\nimport {\n  setStyle,\n  getPosition,\n  clamp,\n  trimPx,\n  validDragElement,\n  getLimit,\n  getWrapperStyle,\n  addEventListener,\n  removeEventListener,\n  addPointerMoving\n} from './utils/dragResize.js'\nimport { disableBodyScroll, enableBodyScroll } from './utils/bodyScrollLock'\n\nconst TransitionState = {\n  Enter: 'enter',\n  Entering: 'entering',\n  Leave: 'leave',\n  Leaving: 'leavng'\n}\n\nfunction validateAttachTarget(val) {\n  const type = typeof val\n\n  if (type === 'boolean' || type === 'string') return true\n\n  return val.nodeType === Node.ELEMENT_NODE\n}\n\nconst STYLE_PROP = {\n  type: [String, Object, Array],\n  default: ''\n}\n\nconst resizeCursor = {\n  t: 'ns-resize',\n  tr: 'nesw-resize',\n  r: 'ew-resize',\n  br: 'nwse-resize',\n  b: 'ns-resize',\n  bl: 'nesw-resize',\n  l: 'ew-resize',\n  tl: 'nwse-resize'\n}\n\nexport default {\n  props: {\n    name: { type: String, default: null },\n    value: { type: Boolean, default: false },\n    ssr: { type: Boolean, default: true },\n    classes: STYLE_PROP,\n    overlayClass: STYLE_PROP,\n    contentClass: STYLE_PROP,\n    styles: STYLE_PROP,\n    overlayStyle: STYLE_PROP,\n    contentStyle: { type: [Object, Array], default: () => ({}) },\n    lockScroll: { type: Boolean, default: true },\n    hideOverlay: { type: Boolean, default: false },\n    clickToClose: { type: Boolean, default: true },\n    escToClose: { type: Boolean, default: false },\n    preventClick: { type: Boolean, default: false },\n    attach: { type: null, default: false, validator: validateAttachTarget },\n    transition: { type: [String, Object], default: 'vfm' },\n    overlayTransition: { type: [String, Object], default: 'vfm' },\n    zIndexAuto: { type: Boolean, default: true },\n    zIndexBase: { type: [String, Number], default: 1000 },\n    zIndex: { type: [Boolean, String, Number], default: false },\n    focusRetain: { type: Boolean, default: true },\n    focusTrap: { type: Boolean, default: false },\n    drag: { type: Boolean, default: false },\n    fitParent: { type: Boolean, default: true },\n    dragSelector: { type: [Boolean, String], default: false },\n    keepChangedStyle: { type: Boolean, default: false },\n    resizeDirections: {\n      type: Array,\n      default: () => [],\n      validator: val =>\n        ['t', 'tr', 'r', 'br', 'b', 'bl', 'l', 'tl'].filter(value => val.indexOf(value) !== -1).length === val.length\n    }\n  },\n  data: () => ({\n    modalStackIndex: null,\n    visible: false,\n    visibility: {\n      modal: false,\n      overlay: false,\n      resize: false\n    },\n    overlayTransitionState: null,\n    modalTransitionState: null,\n    stopEvent: false,\n    params: {},\n    wrapperStyle: {},\n    resizeStyle: {},\n    resizeContentStyle: {}\n  }),\n  computed: {\n    api() {\n      return this[this.$_options.key]\n    },\n    isComponentReadyToBeDestroyed() {\n      return (\n        (this.hideOverlay || this.overlayTransitionState === TransitionState.Leave) &&\n        this.modalTransitionState === TransitionState.Leave\n      )\n    },\n    calculateZIndex() {\n      if (this.zIndex === false) {\n        if (this.zIndexAuto) {\n          return +this.zIndexBase + 2 * (this.modalStackIndex || 0)\n        } else {\n          return false\n        }\n      } else {\n        return this.zIndex\n      }\n    },\n    bindStyle() {\n      return {\n        ...(this.calculateZIndex !== false && { zIndex: this.calculateZIndex })\n      }\n    },\n    bindContentStyle() {\n      let style = [this.resizeContentStyle]\n      Array.isArray(this.contentStyle) ? style.push(...this.contentStyle) : style.push(this.contentStyle)\n      return style\n    },\n    computedTransition() {\n      if (typeof this.transition === 'string') return { name: this.transition }\n      return { ...this.transition }\n    },\n    computedOverlayTransition() {\n      if (typeof this.overlayTransition === 'string') return { name: this.overlayTransition }\n      return { ...this.overlayTransition }\n    },\n    resize() {\n      return this.resizeDirections.length > 0\n    }\n  },\n  watch: {\n    value(value) {\n      if (this.stopEvent) {\n        this.stopEvent = false\n        return\n      }\n      this.mounted()\n      if (!value) {\n        if (this.emitEvent('before-close', true)) {\n          return\n        }\n        this.close()\n      }\n    },\n    lockScroll: 'handleLockScroll',\n    hideOverlay(value) {\n      if (this.value && !value) {\n        this.visibility.overlay = true\n      }\n    },\n    attach: 'mounted',\n    isComponentReadyToBeDestroyed(isReady) {\n      if (isReady) {\n        this.visible = false\n      }\n    },\n    drag(value) {\n      if (this.visible) {\n        value ? this.addDragDown() : this.removeDragDown()\n      }\n    },\n    resize(value) {\n      if (this.visible) {\n        value ? this.addResizeDown() : this.removeResizeDown()\n      }\n    }\n  },\n  created() {\n    this.api.modals.push(this)\n  },\n  mounted() {\n    this.$focusTrap = new FocusTrap()\n    this.mounted()\n  },\n  beforeDestroy() {\n    this.close()\n    this.lockScroll && this.$refs.vfmContainer && enableBodyScroll(this.$refs.vfmContainer)\n    this?.$el?.remove()\n\n    let index = this.api.modals.findIndex(vm => vm === this)\n    this.api.modals.splice(index, 1)\n  },\n  methods: {\n    mounted() {\n      if (this.value) {\n        if (this.emitEvent('before-open', false)) {\n          return\n        }\n        let target = this.getAttachElement()\n        if (target || this.attach === false) {\n          this.attach !== false && target.appendChild(this.$el)\n\n          let index = this.api.openedModals.findIndex(vm => vm === this)\n          if (index !== -1) {\n            // if this is already exist in modalStack, delete it\n            this.api.openedModals.splice(index, 1)\n          }\n          this.api.openedModals.push(this)\n\n          this.modalStackIndex = this.api.openedModals.length - 1\n\n          this.handleLockScroll()\n          this.api.openedModals\n            .filter(vm => vm !== this)\n            .forEach((vm, index) => {\n              if (vm.getAttachElement() === target) {\n                // if vm and this have the same attach element\n                vm.modalStackIndex = index\n                vm.visibility.overlay = false\n              }\n            })\n\n          this.visible = true\n          this.$nextTick(() => {\n            this.startTransitionEnter()\n          })\n        } else if (target !== false) {\n          console.warn('Unable to locate target '.concat(this.attach))\n        }\n      }\n    },\n    close() {\n      let index = this.api.openedModals.findIndex(vm => vm === this)\n      if (index !== -1) {\n        // remove this in modalStack\n        this.api.openedModals.splice(index, 1)\n      }\n      if (this.api.openedModals.length > 0) {\n        // If there are still nested modals opened\n        const $_vm = this.api.openedModals[this.api.openedModals.length - 1]\n        if ($_vm.focusRetain || $_vm.focusTrap) {\n          $_vm.$refs.vfmContainer.focus()\n        }\n        !$_vm.hideOverlay && ($_vm.visibility.overlay = true)\n      }\n      this.drag && this.removeDragDown()\n      this.resize && this.removeResizeDown()\n\n      this.startTransitionLeave()\n    },\n    startTransitionEnter() {\n      this.visibility.overlay = true\n      this.visibility.modal = true\n    },\n    startTransitionLeave() {\n      this.visibility.overlay = false\n      this.visibility.modal = false\n    },\n    handleLockScroll() {\n      if (this.value) {\n        this.$nextTick(() => {\n          if (this.lockScroll) {\n            disableBodyScroll(this.$refs.vfmContainer, {\n              reserveScrollBarGap: true\n            })\n          } else {\n            enableBodyScroll(this.$refs.vfmContainer)\n          }\n        })\n      }\n    },\n    getAttachElement() {\n      let target\n      if (this.attach === false) {\n        target = false\n      } else if (typeof this.attach === 'string') {\n        // CSS selector\n        if (window) {\n          target = window.document.querySelector(this.attach)\n        } else {\n          target = false\n        }\n      } else {\n        // DOM Element\n        target = this.attach\n      }\n      return target\n    },\n    beforeOverlayEnter() {\n      this.overlayTransitionState = TransitionState.Entering\n    },\n    afterOverlayEnter() {\n      this.overlayTransitionState = TransitionState.Enter\n    },\n    beforeOverlayLeave() {\n      this.overlayTransitionState = TransitionState.Leaving\n    },\n    afterOverlayLeave() {\n      this.overlayTransitionState = TransitionState.Leave\n    },\n    beforeModalEnter() {\n      this.modalTransitionState = TransitionState.Entering\n    },\n    afterModalEnter() {\n      this.modalTransitionState = TransitionState.Enter\n      if (this.focusRetain || this.focusTrap) {\n        this.$refs.vfmContainer.focus()\n      }\n      this.focusTrap && this.$focusTrap.enable(this.$refs.vfmContainer)\n      this.drag && this.addDragDown()\n      this.resize && this.addResizeDown()\n\n      this.$emit('opened', this.createModalEvent({ type: 'opened' }))\n    },\n    beforeModalLeave() {\n      this.modalTransitionState = TransitionState.Leaving\n\n      if (this.$focusTrap.enabled()) {\n        this.$focusTrap.disable()\n      }\n    },\n    afterModalLeave() {\n      this.modalTransitionState = TransitionState.Leave\n      this.modalStackIndex = null\n      this.lockScroll && enableBodyScroll(this.$refs.vfmContainer)\n      if (!this.keepChangedStyle) {\n        this.wrapperStyle = {}\n        this.resizeContentStyle = {}\n      }\n\n      let stopEvent = false\n      const event = this.createModalEvent({\n        type: 'closed',\n        stop() {\n          stopEvent = true\n        }\n      })\n      this.$emit('closed', event)\n      if (stopEvent) return\n      this.params = {}\n    },\n    onClickContainer() {\n      this.$emit('click-outside', this.createModalEvent({ type: 'click-outside' }))\n      this.clickToClose && this.$emit('input', false)\n    },\n    onEsc() {\n      if (this.visible && this.escToClose) {\n        this.$emit('input', false)\n      }\n    },\n    createModalEvent(eventProps = {}) {\n      return {\n        ref: this,\n        ...eventProps\n      }\n    },\n    emitEvent(eventType, value) {\n      let stopEvent = false\n      const event = this.createModalEvent({\n        type: eventType,\n        stop() {\n          stopEvent = true\n        }\n      })\n      this.$emit(eventType, event)\n      if (stopEvent) {\n        this.stopEvent = true\n        this.$emit('input', value)\n        return true\n      }\n      return false\n    },\n    toggle(show, params) {\n      const value = typeof show === 'boolean' ? show : !this.value\n      if (value && arguments.length === 2) {\n        this.params = params\n      }\n      this.$emit('input', value)\n    },\n    pointerDown(e) {\n      e.stopPropagation()\n      const { vfmContainer, vfmWrapper, vfmContent } = this.$refs\n      const direction = e.target.getAttribute('direction')\n      let state\n      if (direction) {\n        state = 'resize'\n      } else if (validDragElement(e, vfmContent, this.dragSelector)) {\n        state = 'drag'\n      } else {\n        return\n      }\n      this.$emit(`${state}:start`, e)\n      const down = getPosition(e)\n      const limit = this.fitParent && getLimit(vfmContainer, vfmWrapper, vfmContent)\n      const wrapperPosition = {\n        top: trimPx(vfmWrapper.style.top),\n        left: trimPx(vfmWrapper.style.left)\n      }\n      let { position, width, height } = window.getComputedStyle(vfmContent)\n      width = trimPx(width)\n      height = trimPx(height)\n      const vfmContentAbsolute = position === 'absolute'\n      const resetBodyCursor = state === 'resize' && setStyle(document.body, 'cursor', resizeCursor[direction])\n      addPointerMoving(\n        e => {\n          this.$emit(`${state}:move`, e)\n          e.stopPropagation()\n          const move = getPosition(e)\n          let offset = {\n            x: move.x - down.x,\n            y: move.y - down.y\n          }\n          if (state === 'resize') {\n            offset = this.getResizeOffset(direction, offset, limit.rectContainer, limit.rectContent, vfmContentAbsolute)\n            offset.width && (this.resizeContentStyle.width = width - offset.width + 'px')\n            offset.height && (this.resizeContentStyle.height = height - offset.height + 'px')\n          }\n          this.wrapperStyle = getWrapperStyle(wrapperPosition, offset, this.fitParent, limit, vfmContentAbsolute)\n        },\n        e => {\n          if (this.resize) {\n            this.resetResizeStyle()\n          }\n          if (state === 'resize') {\n            resetBodyCursor && resetBodyCursor()\n          }\n          this.$emit(`${state}:end`, e)\n        }\n      )\n    },\n    addDragDown() {\n      addEventListener('down', this.$refs.vfmContent, this.pointerDown)\n      this.wrapperStyle.touchAction = 'none'\n    },\n    removeDragDown() {\n      removeEventListener('down', this.$refs.vfmContent, this.pointerDown)\n    },\n    addResizeDown() {\n      this.resetResizeStyle()\n      window.addEventListener('resize', this.resetResizeStyle)\n      this.visibility.resize = true\n      this.$nextTick(() => {\n        addEventListener('down', this.$refs.vfmResize, this.pointerDown)\n      })\n    },\n    removeResizeDown() {\n      window.removeEventListener('resize', this.resetResizeStyle)\n      removeEventListener('down', this.$refs.vfmResize, this.pointerDown)\n      this.visibility.resize = false\n    },\n    resetResizeStyle() {\n      const { width, height, top, left } = this.$refs.vfmContent.getBoundingClientRect()\n      this.resizeStyle = {\n        top: top + 'px',\n        left: left + 'px',\n        width: width + 'px',\n        height: height + 'px',\n        touchAction: 'none'\n      }\n    },\n    getResizeOffset(direction, offset, rectContainer, rectContent, vfmContentAbsolute) {\n      const _offset = {\n        x: 0,\n        y: 0,\n        width: 0,\n        height: 0\n      }\n      const set = {\n        t: () => {\n          const y = this.fitParent ? clamp(rectContainer.top - rectContent.top, offset.y, rectContent.height) : offset.y\n          _offset.y = vfmContentAbsolute ? y : y / 2\n          _offset.height = y\n        },\n        b: () => {\n          const y = this.fitParent\n            ? clamp(-rectContent.height, offset.y, rectContainer.bottom - rectContent.bottom)\n            : offset.y\n          _offset.y = vfmContentAbsolute ? 0 : y / 2\n          _offset.height = -y\n        },\n        l: () => {\n          const x = this.fitParent\n            ? clamp(rectContainer.left - rectContent.left, offset.x, rectContent.width)\n            : offset.x\n          _offset.x = x / 2\n          _offset.width = x\n        },\n        r: () => {\n          const x = this.fitParent\n            ? clamp(-rectContent.width, offset.x, rectContainer.right - rectContent.right)\n            : offset.x\n          _offset.x = x / 2\n          _offset.width = -x\n        },\n        tl() {\n          set.t()\n          set.l()\n        },\n        tr() {\n          set.t()\n          set.r()\n        },\n        br() {\n          set.b()\n          set.r()\n        },\n        bl() {\n          set.b()\n          set.l()\n        }\n      }\n      set[direction]()\n      return _offset\n    }\n  }\n}\n</script>\n\n<style lang=\"css\" scoped>\n.vfm--fixed {\n  position: fixed;\n}\n.vfm--absolute {\n  position: absolute;\n}\n.vfm--inset {\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n}\n.vfm--overlay {\n  background-color: rgba(0, 0, 0, 0.5);\n}\n.vfm--prevent-none {\n  pointer-events: none;\n}\n.vfm--prevent-auto {\n  pointer-events: auto;\n}\n.vfm--outline-none:focus {\n  outline: none;\n}\n.vfm-enter-active,\n.vfm-leave-active {\n  transition: opacity 0.2s;\n}\n.vfm-enter,\n.vfm-leave-to {\n  opacity: 0;\n}\n\n.vfm--select-none {\n  user-select: none;\n}\n\n.vfm--resize-tr,\n.vfm--resize-br,\n.vfm--resize-bl,\n.vfm--resize-tl {\n  width: 12px;\n  height: 12px;\n  z-index: 10;\n}\n\n.vfm--resize-t {\n  top: -6px;\n  left: 0;\n  width: 100%;\n  height: 12px;\n  cursor: ns-resize;\n}\n.vfm--resize-tr {\n  top: -6px;\n  right: -6px;\n  cursor: nesw-resize;\n}\n.vfm--resize-r {\n  top: 0;\n  right: -6px;\n  width: 12px;\n  height: 100%;\n  cursor: ew-resize;\n}\n.vfm--resize-br {\n  bottom: -6px;\n  right: -6px;\n  cursor: nwse-resize;\n}\n.vfm--resize-b {\n  bottom: -6px;\n  left: 0;\n  width: 100%;\n  height: 12px;\n  cursor: ns-resize;\n}\n.vfm--resize-bl {\n  bottom: -6px;\n  left: -6px;\n  cursor: nesw-resize;\n}\n.vfm--resize-l {\n  top: 0;\n  left: -6px;\n  width: 12px;\n  height: 100%;\n  cursor: ew-resize;\n}\n.vfm--resize-tl {\n  top: -6px;\n  left: -6px;\n  cursor: nwse-resize;\n}\n</style>\n","import VueFinalModal from './VueFinalModal.vue'\nimport ModalsContainer from './ModalsContainer.vue'\n\nfunction assignOptions(component, options) {\n  const _component = { ...component }\n  Object.assign(_component.props, {\n    $_options: { type: Object, default: () => options }\n  })\n  return _component\n}\n\nfunction createVfm(Vue, options) {\n  let vfm\n\n  return function() {\n    vfm = {\n      show(modal, ...args) {\n        switch (typeof modal) {\n          case 'string':\n            this.toggle(modal, true, ...args)\n            break\n          case 'object':\n            {\n              const defaultModal = {\n                value: true,\n                id: Symbol('dynamicModal'),\n                component: options.componentName,\n                bind: {},\n                slots: {},\n                on: {},\n                params: args[0]\n              }\n              this.dynamicModals.push(Object.assign(defaultModal, modal))\n            }\n            break\n        }\n      },\n      hide(...names) {\n        this.toggle(names, false)\n      },\n      hideAll() {\n        for (let i = this.openedModals.length - 1; i >= 0; i--) {\n          this.openedModals[i].$emit('input', false)\n        }\n      },\n      toggle(name, ...args) {\n        const modals = Array.isArray(name) ? this.get(...name) : this.get(name)\n        modals.forEach(modal => modal.toggle(...args))\n      },\n      get(...names) {\n        return this.modals.filter(modal => names.includes(modal.name))\n      },\n      dynamicModals: [],\n      openedModals: [],\n      modals: []\n    }\n    return Vue.observable(vfm)\n  }\n}\n\nexport function bindPrototype(Vue, options) {\n  const vfm = createVfm(Vue, options)()\n  Object.defineProperty(Vue.prototype, options.key, {\n    get() {\n      return vfm\n    }\n  })\n}\n\nexport function registModal(Vue, options) {\n  Vue.component(options.componentName, assignOptions(VueFinalModal, options))\n}\nexport function registContainer(Vue, options) {\n  Vue.component(options.dynamicContainerName, assignOptions(ModalsContainer, options))\n}\n","export const DUPLICATE_KEY = '[vue-final-modal] Duplicate registration API key of VueFinalModal.'\n\nexport const DUPLICATE_COMPONENT = '[vue-final-modal] Duplicate registration componentName of VueFinalModal.'\n\nexport const DUPLICATE_DYNAMIC_CONTAINER =\n  '[vue-final-modal] Duplicate registration dynamicContainerName of ModalsContainer.'\n","import { bindPrototype, registModal, registContainer } from './PluginCore'\nimport { DUPLICATE_KEY, DUPLICATE_COMPONENT, DUPLICATE_DYNAMIC_CONTAINER } from './utils/errors'\n\nconst defaultOptions = {\n  componentName: 'VueFinalModal',\n  dynamicContainerName: 'ModalsContainer',\n  key: '$vfm'\n}\n\nconst validPlugin = (duplicateKey, duplicateComponent, duplicateDynamicContainer) => {\n  if (!(duplicateKey || duplicateComponent || duplicateDynamicContainer)) return true\n\n  if (typeof window === 'undefined') return false\n\n  duplicateKey && console.error(DUPLICATE_KEY)\n  duplicateComponent && console.error(DUPLICATE_COMPONENT)\n  duplicateDynamicContainer && console.error(DUPLICATE_DYNAMIC_CONTAINER)\n\n  return false\n}\n\nconst Plugin = pluginOptions => ({\n  install(Vue, options) {\n    const _options = Object.assign({}, defaultOptions, pluginOptions, options)\n    const duplicateKey = Vue.prototype[_options.key]\n    const duplicateComponent = Vue.options.components[_options.componentName]\n    const duplicateDynamicContainer = Vue.options.components[_options.dynamicContainerName]\n\n    if (validPlugin(duplicateKey, duplicateComponent, duplicateDynamicContainer)) {\n      bindPrototype(Vue, _options)\n      registModal(Vue, _options)\n      registContainer(Vue, _options)\n    }\n  }\n})\n\nexport default Plugin\n"],"names":["queryFocusableElements","element","selector","querySelectorAll","isFocused","document","activeElement","FocusTrap","root","elements","onKeyDown","this","bind","enable","disable","firstElement","lastElement","length","event","key","keyCode","isTabPressed","shiftKey","focus","preventDefault","addEventListener","removeEventListener","getPosition","e","targetTouches","x","clientX","y","clientY","clamp","min","num","max","Math","trimPx","distance","Number","replace","pointerType","down","pc","m","move","up","type","el","callback","passive","hasPassiveEvents","window","passiveTestOptions","previousBodyOverflowSetting","previousBodyPaddingRight","isIosDevice","navigator","platform","test","maxTouchPoints","locks","documentListenerAdded","initialClientY","hasAnyScrollableEl","delta","path","push","classList","contains","parentElement","composedPath","forEach","nodeType","Node","ELEMENT_NODE","style","getComputedStyle","includes","overflowY","scrollHeight","clientHeight","hasScrollbar","scrollTop","shouldScroll","allowTouchMove","some","rawEvent","target","touches","disableBodyScroll","targetElement","options","lock","ontouchstart","ontouchmove","isTargetElementTotallyScrolled","stopPropagation","handleScroll","undefined","reserveScrollBarGap","scrollBarGap","innerWidth","documentElement","clientWidth","computedBodyPaddingRight","parseInt","body","getPropertyValue","paddingRight","overflow","setOverflowHidden","console","error","enableBodyScroll","filter","dragSelector","Array","apply","vfmContainer","vfmWrapper","vfmContent","rectContainer","getBoundingClientRect","rectContent","minTop","top","minLeft","left","maxTop","bottom","maxLeft","right","value","cacheStyle","moving","ending","end","wrapperPosition","offset","fitParent","limit","vfmContentAbsolute","position","touchAction","height","width","assignOptions","component","_component","Object","assign","props","$_options","default","bindPrototype","Vue","vfm","show","modal","args","toggle","defaultModal","id","Symbol","componentName","slots","on","params","dynamicModals","hide","names","hideAll","i","openedModals","$emit","name","isArray","get","modals","observable","createVfm","defineProperty","prototype","defaultOptions","dynamicContainerName","pluginOptions","install","_options","duplicateKey","duplicateComponent","duplicateDynamicContainer","validPlugin","components","VueFinalModal","registModal","ModalsContainer","registContainer"],"mappings":"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"}